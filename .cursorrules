# Malsami-FE 프로젝트 Cursor AI 가이드라인

## 프로젝트 컨텍스트
- 프로젝트: Malsami-FE (Next.js 기반 학술 커뮤니티 플랫폼)
- 주요 기술 스택: Next.js, TypeScript, Tailwind CSS, Shadcn UI, Redux

## 코드 스타일 및 구조 가이드라인

### 1. 일반 코딩 원칙
- 명확성과 가독성을 최우선으로 합니다.
- 기능적이고 선언적인 프로그래밍 패턴을 선호합니다.
- 코드 중복을 최소화하고 모듈화를 지향합니다.

### 2. 타입스크립트 사용 가이드
- 모든 코드에 TypeScript 엄격 타입을 사용합니다.
- 인터페이스를 타입 별칭보다 선호합니다.
- Boolean 변수는 반드시 `is` 접두사를 사용합니다.

### 3. 컴포넌트 작성 규칙
- 함수형 컴포넌트와 TypeScript 인터페이스를 사용합니다.
- 컴포넌트명은 PascalCase를 사용합니다.
- 50줄 이상의 컴포넌트는 분리를 고려합니다.

### 4. 상태 관리
- Redux를 사용한 전역 상태 관리
- 슬라이스 파일명: `[기능명]Slice.ts`
- 액션 이름은 camelCase의 동사 형태로 작성

### 5. 스타일링 가이드
- Tailwind CSS 유틸리티 클래스 사용
- 하드코딩된 색상/크기 대신 디자인 시스템 토큰 활용
- 반응형 디자인은 모바일 우선 접근 방식

### 6. API 통신
- FormData 기반 API 통신
- 명확한 Command/Dto 패턴 사용
- 에러는 명시적으로 처리하고 로깅합니다.

### 7. 네이밍 컨벤션
- 변수/함수: camelCase
- 상수: UPPER_SNAKE_CASE
- 컴포넌트/클래스: PascalCase
- 축약어 및 모호한 이름 금지

### 8. 성능 최적화
- React.memo, useMemo, useCallback 적절히 사용
- 불필요한 렌더링 방지
- 서버 컴포넌트 및 정적 생성 최대한 활용

### 9. 에러 처리
- 오류는 항상 명시적으로 발생시킵니다.
- 특정 오류 타입 사용 (ValueError, TypeError 등)
- 오류 메시지는 명확하고 조치 가능해야 합니다.

### 10. 코드 변경 가이드
- 최소한의 변경을 원칙으로 합니다.
- 기존 코드 스타일과 패턴을 존중합니다.
- 현재 대화의 맥락에 집중하여 변경합니다.

## 프로젝트별 특수 규칙
- Shadcn UI 및 Radix UI 컴포넌트 우선 사용
- 커스텀 훅은 `use` 접두사로 시작
- 파일 경로: 소문자 대시 케이스 (예: `auth-wizard`)

## AI 협업 가이드
- 코드 제안 시 최소 3개의 테스트 케이스 고려
- 복잡한 로직은 단계별로 설명
- 코드와 함께 간단한 구현 의도 설명

## 주의사항
- any 타입 사용 금지
- 불변성 유지
- 최신 React 및 Next.js 모범 사례 준수 