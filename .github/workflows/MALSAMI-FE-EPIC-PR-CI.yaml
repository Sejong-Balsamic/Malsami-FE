name: MALSAMI-FE-EPIC-PR-CI

on:
  push:
    branches:
      - main
      - test
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Log - Cache Setup
        run: echo "캐시 설정을 시작합니다..."

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Cache node_modules
        id: node-modules-cache
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Cache Next.js build
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-

      - name: Log - Building project
        run: echo "프로젝트를 빌드 중입니다..."
      - name: Build with npm
        run: npm run build

      - name: Docker setup
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log - Setting up Docker cache
        run: echo "Docker 레이어 캐시를 설정 중입니다..."
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile') }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log - Building and pushing Docker image
        run: echo "Docker 이미지를 빌드하고 푸시 중입니다..."
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/sejong-malsami-front-container:${{ github.ref_name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 2022
          script: |
            echo "배포를 시작합니다..."
            export PATH=$PATH:/usr/local/bin
            export PW=${{ secrets.SERVER_PASSWORD }}
            BRANCH=${{ github.ref_name }}
            PORT=3000
            CONTAINER_NAME="sejong-malsami-front"
            if [ "$BRANCH" == "main" ]; then
              PORT=3004
              echo "메인 브랜치로 배포합니다. 포트는 $PORT입니다."
            elif [ "$BRANCH" == "test" ]; then
              CONTAINER_NAME="sejong-malsami-front-test"
              PORT=3003
              echo "테스트 브랜치로 배포합니다. 컨테이너 이름은 $CONTAINER_NAME, 포트는 $PORT입니다."
            fi
            echo "도커 이미지를 풀링 중입니다: ${{ secrets.DOCKERHUB_USERNAME }}/sejong-malsami-front-container:${BRANCH}"
            echo $PW | sudo -S docker pull ${{ secrets.DOCKERHUB_USERNAME }}/sejong-malsami-front-container:${BRANCH}
            # 실행 중인 컨테이너가 있으면 중지 후 삭제
            if [ "$(sudo docker ps -q -f name=$CONTAINER_NAME)" ]; then
              echo $PW | sudo -S docker stop $CONTAINER_NAME
            fi
            # 컨테이너가 존재하면 삭제
            if [ "$(sudo docker ps -a -q -f name=$CONTAINER_NAME)" ]; then
              echo $PW | sudo -S docker rm -f $CONTAINER_NAME
              sleep 3
            fi
            # 컨테이너 삭제가 정상적으로 완료되었는지 확인
            if [ "$(sudo docker ps -a -q -f name=$CONTAINER_NAME)" ]; then
              echo "Container deletion failed, retrying..."
              echo $PW | sudo -S docker rm -f $CONTAINER_NAME
            fi
            echo $PW | sudo -S docker run -d \
              -p ${PORT}:3000 \
              --name $CONTAINER_NAME \
              --network sejong-malsami-network \
              -v /var/run/docker.sock:/var/run/docker.sock \
              -e NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/sejong-malsami-front-container:${BRANCH}
            
            echo "배포가 완료되었습니다."
